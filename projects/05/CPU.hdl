// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction, b=aluout, sel=instruction[15], out=onemuxout);
    
    Mux(a=true,b=instruction[5],sel=instruction[15], out=loadAReg);
    
    ARegister(in=onemuxout, load=loadAReg,out=pcARegout, out[0..14]=addressM, out=ARegout);

    Mux(a=false, b=instruction[12], sel=instruction[15], out=sel2Mux);

    Mux16(a=ARegout, b=inM, sel=sel2Mux, out=aluinputmux);
    
    Mux(a=true, b=instruction[11], sel=instruction[15], out=aluc1);
    Mux(a=true, b=instruction[10], sel=instruction[15], out=aluc2);

   Mux(a=false, b=instruction[9], sel=instruction[15], out=aluc3);
   Mux(a=false, b=instruction[8], sel=instruction[15], out=aluc4);

   Mux(a=false, b=instruction[7], sel=instruction[15], out=aluc5);
   Mux(a=false, b=instruction[6], sel=instruction[15], out=aluc6);

   Mux(a=false, b=instruction[4], sel=instruction[15], out=loadDRegister);

   DRegister(in=aluoutDRegister, load=loadDRegister, out=DRegisterout);

   ALU(x=DRegisterout, y=aluinputmux, zx=aluc1, nx=aluc2, zy=aluc3, ny=aluc4, f=aluc5, no=aluc6, out=aluout, out=aluoutDRegister, out=outM,zr=outzero, ng=outneg);
   Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);	

   Or(a=outzero, b=outneg, out=zeroorneg);
   Not(in=zeroorneg, out=outpos);

   Mux(a=false, b=instruction[2], sel=outneg, out=comp1out);
   Mux(a=comp1out, b=instruction[1], sel=outzero, out=comp2out);
   Mux(a=comp2out, b=instruction[0], sel=outpos, out=compout);

   Mux(a=false, b=compout, sel=instruction[15], out=loadbit);	

   Not(in=loadbit, out=incbit);

   PC(in=pcARegout, load=loadbit, inc=incbit, reset=reset, out[0..14]=pc);


      	
}